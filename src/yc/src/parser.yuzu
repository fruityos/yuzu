; parser.yuzu

; node types
sub AST_PROGRAM()	return 0 end
sub AST_DEFINITION()	return 1 end
sub AST_STATEMENT()	return 2 end
sub AST_LVALUE()	return 3 end
sub AST_RVALUE()	return 4 end
sub AST_BINOP()		return 5 end
sub AST_UNARY()		return 6 end
sub AST_CONSTANT()	return 7 end
sub AST_LEAF()		return 8 end

; node subtypes
sub STATEMENT_LOCAL()		return 0 end
sub STATEMENT_IF()		return 1 end
sub STATEMENT_WHILE()		return 2 end
sub STATEMENT_RETURN()		return 3 end
sub STATEMENT_RVALUE()		return 4 end

sub LVALUE_ID()			return 5 end
sub LVALUE_INDIRECTION()	return 6 end

sub RVALUE_BINOP()		return 7 end
sub RVALUE_FUNCTION_CALL()	return 8 end
sub RVALUE_ASSIGN_WORD()	return 9 end
sub RVALUE_ASSIGN_BYTE()	return 10 end
sub RVALUE_LVALUE_WORD()	return 11 end
sub RVALUE_LVALUE_BYTE()	return 12 end
sub RVALUE_UNARY()		return 13 end
sub RVALUE_PARENS()		return 14 end
sub RVALUE_CONSTANT()		return 15 end

sub ast_get_type(node)		return [node] end
sub ast_get_subtype(node)	return [node + 8] end
sub ast_get_token(node)		return [node + 16] end
sub ast_get_kid(node)		return [node + 24] end
sub ast_get_sibling(node)	return [node + 32] end
sub ast_get_value(node)		return node + 40 end

sub ast_set_type(node,v)	[node] = v end
sub ast_set_subtype(node,v)	[node + 8] = v end
sub ast_set_token(node,v)	[node + 16] = v end
sub ast_set_kid(node,v)		[node + 24] = v end
sub ast_set_sibling(node,v)	[node + 32] = v end

sub AST_SIZE()			return 104 end

sub yc_alloc(size)
	local ptr
	ptr = brk(-1)
	brk(ptr + size)
	return ptr
end

sub yc_free(ptr)
end

sub yc_create_node(type)
	local node
	node = yc_alloc(AST_SIZE())
	ast_set_type(node, type)
	ast_set_token(node, 0)
	ast_set_kid(node, 0)
	ast_set_sibling(node, 0)
	return node	
end

sub yc_destroy_node(node)
	if !node then return 0 end
	yc_destroy_node(ast_get_kid(node))
	yc_destroy_node(ast_get_sibling(node))
	yc_free(ast_get_value(node))
	yc_free(node)
end

sub yc_append_kid(node, kid)
	local kidList
	kidList = ast_get_kid(node)
	if !kidList then
		ast_set_kid(node, kid)
	else
		while ast_get_sibling(kidList) do
			kidList = ast_get_sibling(kidList)
		end
		ast_set_sibling(kidList, kid)
	end
end

sub yc_accept(buffer, token, parent)
	local i, leafNode, read

	leafNode = yc_create_node(AST_LEAF())
	read = yc_alloc(8)
	if token == yc_next_token([buffer], read, ast_get_value(leafNode)) then
		ast_set_token(leafNode, token)
		yc_append_kid(parent, leafNode)
		buffer = buffer + [read]
		yc_free(read)
		return 1
	end
	yc_destroy_node(leafNode)
	yc_free(read)
	return 0
end

sub yc_expect(buffer, token, parent)
	if yc_accept(buffer, token, parent) then
		return 1
	end
end
