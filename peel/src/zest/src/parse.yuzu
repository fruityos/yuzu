
{ zest parser }

sub parse_atoi(str)
	local c, value
	c = [str] & 255
	while ((c >= (["0"] & 255)) && (c <= (["9"] & 255))) do
		value = value * 10
		value = value + (c - (["0"] & 255))
		str = str + 1
		c = [str] & 255
	end
	return value
end

sub parse_insert_symbol(value, symbol, symtab)
	local i, c
	while [symtab] != -1 do
		symtab = symtab + 64
	end
	[symtab] = value
	i = 8
	while c = [symbol] & 255 do
		if c != ([":"] & 255) then
			[symtab + i] = c
			i = i + 1
		end
		symbol = symbol + 1
	end
	[symtab + i] = 0
end

sub parse_lookup_symbol(symbol, symtab)
	local name, value, t
	while (value = [symtab]) != -1 do
		name = symtab + 8
		t = symbol
		while ([name] & 255) == ([t] & 255) && ([name] & 255) do
			name = name + 1
			t = t + 1
		end
		if ([name] & 255) == ([t] & 255) then
			return value
		end
		symtab = symtab + 64
	end
	return value
end

sub parse_expect_register(token)
	local reg
	reg = lex_keyword_lookup(token) - 36
	if (reg < 0) || (reg > 9) then
		lex_puts("expected register got ")
		lex_puts(token)
		putch(10)
		exit()
	end
	return reg
end

sub parse_expect_newline(ptr, token)
	ptr = lex_get_next_token(ptr, token)
	if ptr && ([token] & 255 != 10) then
		lex_puts("expected newline got ")
		lex_puts(token)
		putch(10)
		exit()
	end
	return ptr
end

sub parse_expect_comma(ptr, token)
	ptr = lex_get_next_token(ptr, token)
	if lex_keyword_lookup(token) != 48 then
		lex_puts("expected comma got ")
		lex_puts(token)
		putch(10)
		exit()
	end
	return ptr
end


sub parse_no_args(op, fout, ptr, token)
	ptr = parse_expect_newline(ptr, token)
	return emit_no_args(op, fout)
end

sub parse_one_reg(op, fout, ptr, token)
	local reg
	ptr = lex_get_next_token(ptr, token)
	reg = parse_expect_register(token)
	ptr = parse_expect_newline(ptr, token)
	return emit_one_reg(op, fout, reg)
end

sub parse_two_reg(op, fout, ptr, token) 
	local srcReg, dstReg
	ptr = lex_get_next_token(ptr, token)
	dstReg = parse_expect_register(token)
	ptr = parse_expect_comma(ptr, token)
	ptr = lex_get_next_token(ptr, token)
	srcReg = parse_expect_register(token)
	ptr = parse_expect_newline(ptr, token)
	return emit_two_reg(op, fout, srcReg, dstReg)
end

sub parse_setcc(op, fout, ptr, token)
	local dl
	ptr = lex_get_next_token(ptr, token)
	if lex_keyword_lookup(token) != 47 then
		lex_puts("expected dl got ")
		lex_puts(token)
		putch(10)
		exit()
	end
	ptr = parse_expect_newline(ptr, token)
	return emit_setcc(op, fout)
end

sub parse_shift(op, fout, ptr, token)
	local dstReg, cl
	ptr = lex_get_next_token(ptr, token)
	dstReg = parse_expect_register(token)
	ptr = parse_expect_comma(ptr, token)
	ptr = lex_get_next_token(ptr, token)
	if lex_keyword_lookup(token) != 46 then
		lex_puts("expected cl got ")
		lex_puts(token)
		putch(10)
		exit()
	end
	ptr = parse_expect_newline(ptr, token)
	return emit_shift(op, fout, dstReg)
end

sub parse_call(op, fout, ptr, token)
	local reg
	ptr = lex_get_next_token(ptr, token)
	reg = parse_expect_register(token)
	if reg != 0 then
		lex_puts("expected rax got ")
		lex_puts(token)
		putch(10)
		exit()
	end
	ptr = parse_expect_newline(ptr, token)
	return emit_call(fout)
end

sub parse_branch(op, fout, ptr, token, pos, symbols)
	local value

	ptr = lex_get_next_token(ptr, token)
	if lex_keyword_lookup(token) != -1 then
		lex_puts("expected symbol got keyword ")
		lex_puts(token)
		putch(10)
		exit()
	end
	value = parse_lookup_symbol(token, symbols)
	if (value == -1) && (fout != -1) then
		lex_puts("expected symbol got ")
		lex_puts(token)
		putch(10)
		exit()
	end
	return emit_branch(op, fout, value, pos)
end


sub parse_label(fout, pos, ptr, token, symbols)
	if fout == -1 then
		parse_insert_symbol(pos, token, symbols)
	end
	ptr = parse_expect_newline(ptr, token)
end

sub parse_db(fout, ptr, token) end

sub parse_mov(fout, ptr, token, symbols)
	local dstReg, srcReg, value

	ptr = lex_get_next_token(ptr, token)
	if lex_keyword_lookup(token) == 49 then { "[" }
		{ store }
		ptr = lex_get_next_token(ptr, token)
		dstReg = parse_expect_register(token)
		ptr = lex_get_next_token(ptr, token)
		if lex_keyword_lookup(token) != 50 then
			lex_puts("expected ]")
			putch(10)
			exit()
		end
		ptr = parse_expect_comma(ptr, token)
		ptr = lex_get_next_token(ptr, token)
		srcReg = parse_expect_register(token)
		ptr = parse_expect_newline(ptr, token)
		return emit_store(fout, srcReg, dstReg)
	else
		dstReg = parse_expect_register(token)
		ptr = parse_expect_comma(ptr, token)
		ptr = lex_get_next_token(ptr, token)

		{ load }
		if lex_keyword_lookup(token) == 49 then { "[" }
			ptr = lex_get_next_token(ptr, token)
			srcReg = parse_expect_register(token)
			ptr = lex_get_next_token(ptr, token)
			if lex_keyword_lookup(token) != 50 then
				lex_puts("expected ]")
				putch(10)
				exit()
			end
			ptr = parse_expect_newline(ptr, token)
			return emit_load(fout, srcReg, dstReg)
		end

		{ load imm }
		if lex_keyword_lookup(token) == -1 then
			value = parse_lookup_symbol(token, symbols)
			if value == -1 then
				value = parse_atoi(token)
			end
			{ if value is -2, the symbol is external! }
			if value == -2 then
				value = 0
			end
			return emit_load_imm(fout, dstReg, value)
		end

		{ two reg }
		srcReg = parse_expect_register(token)
		ptr = parse_expect_newline(ptr, token)
		emit_two_reg(25, fout, srcReg, dstReg)		

	end
end

sub parse_extern(fout, pos, ptr, token, symbols)
	ptr = lex_get_next_token(ptr, token)
	if lex_keyword_lookup(token) != -1 then
		lex_puts("expected symbol got keyword ")
		lex_puts(token)
		putch(10)
		exit()
	end
	if fout == -1 then
		parse_insert_symbol(0, token, symbols)
	end
end

{ if fout is -1, then we will simply build a symbol table, f >= 0 indicates second pass }
sub parse_file(fout, fin, symbols)

	local buffer, ptr, token, c, k, pos

	buffer = brk(-1)
	token = brk(buffer + 256)
	brk(token + 256)

	while c = fgetch(fin) & 255 do
		ptr = buffer
		while (c) && (c != 10) do
			[ptr] = c
			ptr = ptr + 1
			c = fgetch(fin) & 255
		end
		[ptr] = 0
		ptr = buffer

		ptr = lex_get_next_token(ptr, token)

		if ptr then

			k = lex_keyword_lookup(token)

			{ ret, syscall }
			if (k >= 0) && (k <= 1) then pos = pos + parse_no_args(k, fout, ptr, token) end

			{ push, pop, mul, div, neg, not }
			if (k >= 2) && (k <= 7) then pos = pos + parse_one_reg(k, fout, ptr, token) end

			{ add, sub, and, xor, or, test, cmp }
			if (k >= 8) && (k <= 14) then pos = pos + parse_two_reg(k, fout, ptr, token) end

			{ shl, shr }
			if (k >= 15) && (k <= 16) then pos = pos + parse_shift(k, fout, ptr, token) end

			{ sete, setne, setz, setnz, setg, setl, setge, setle }
			if (k >= 17) && (k <= 24) then pos = pos + parse_setcc(k, fout, ptr, token) end

			{ call }
			if k == 27 then pos = pos + parse_call(k, fout, ptr, token) end

			{ jmp, jnz, jz }
			if (k >= 28) && (k <= 30) then pos = pos + parse_branch(k, fout, ptr, token, pos, symbols) end

			{ label: }
			if k == -1 then parse_label(fout, pos, ptr, token, symbols) end

			{ extern }
			if k == 32 then parse_extern(fout, pos, ptr, token, symbols) end

			{ mov }
			if k == 25 then pos = pos + parse_mov(fout, ptr, token, symbols) end

			{ db }
			if k == 31 then pos = pos + parse_db(fout, ptr, token) end

		end
	end
end
