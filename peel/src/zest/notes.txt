{
Instructions:

	symbols  = ",[]-+", 10

	/* must also scan for numbers and symbols */

	I. PASS 1- symbol table = "string", value, global?, external?
	II. PASS 2- assemble

	1. Skip whitespace (but newlines are valid tokens), and everything between semicolons and newlines
	2. If it starts with a number, scan until we reach a non num. TOKEN_NUM
	3. If it starts with a letter, scan until we reach a non alphanum, then compare keywords to determine if keyword or symbol. If it ends in a colon, then it's a label.
	4. If it starts with a quote, scan for a string.
	5. Otherwise check for ",", "[", "]", "-", "+"

	push r64 \n
	pop r64 \n
	mov r64, # \n
	mov r64, r64 \n
	mov [r64 (-/+ off)], r64 \n
	mov r64, [r64 (-/+ off)] \n
	lea r64, [r64 (-/+ off)] \n

	add r64, r64 \n
	sub r64, r64 \n
	and r64, r64 \n
	or  r64, r64 \n
	xor r64, r64 \n

	mul r64 \n
	div r64 \n
	shl r64, cl \n
	shr r64, cl \n
	neg r64 \n
	not r64 \n

	test  r64, r64 \n
	cmp   r64, r64 \n
	setcc r8 \n

	call rax \n
	ret \n
	jmp SYM \n
	jnz SYM \n
	jz  SYM \n
	SYM: \n

	db "STRING" \n
	db 0 \n

	extern SYMBOL \n
	global SYMBOL \n
	bits 64 \n

push rax
pop rdi
pop rbp
push rbp

mov rax, SYMBOL
mov rax, rdx
mov rdi, rdx
mov rcx, rdi
mov rdi, rax
mov rsi, rax
mov rdx, rax
mov rcx, rax
mov r8, rax
mov r9, rax

mov qword [rbp - #], rdi
mov qword [rbp - #], rsi
mov qword [rbp - #], rdx
mov qword [rbp - #], rcx
mov qword [rbp - #], r8
mov qword [rbp - #], r9
mov qword [rbp - #], 0
mov rsp, rbp
mov rbp, rsp
mov qword [rdi], rax
mov rax, qword [rax]

lea rax, qword [rbp - ##]

add rax, rdi
sub rax, rdi
sub rsp, ##
mul rdi
div rdi
and rax, rdi
or rax, rdi
xor rax, rdi
xor rdx, rdx
shl rax, cl
shr rax, cl
neg rax
not rax

test rax, rax
test rdi, rdi
cmp rax, rdi

setz dl
setnz dl
sete dl
setne dl
setg dl
setl dl
setge dl
setle dl

call rax
ret

jmp SYMBOL
jz SYMBOL
jnz SYMBOL
LABEL:
db "STRING", 0

extern SYMBOL
global SYMBOL
bits 64
section .text

}
